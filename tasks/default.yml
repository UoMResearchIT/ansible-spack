---
- name: Install OS package dependencies
  become: yes
  become_user: root
  with_items: '{{ spack_dep_pkgs | default([]) }}'
  loop_control:
    loop_var: spack_os_pkg
  package:
    state: present
    name: '{{ spack_os_pkg }}'

- name: Create a Spack service user.
  user: 
    name: '{{ spack_service_user }}'
    home: /var/lib/{{ spack_service_user }}
    shell: /sbin/nologin

# Not sure if this will be necessary.  Leaving it in for now. 
# In the conda role, this is used for regularly backing up conda envs.
#- name: Ensure that service user's name and e-mail are configured for git.
#  become: yes
#  become_user: '{{ spack_service_user }}'
#  template:
#    src: gitconfig.j2
#    dest: /var/lib/{{ spack_service_user }}/.gitconfig

- name: Check for installation of Spack
  become: yes
  stat:
    path: '{{ spack_install_dir }}/bin/spack'
  changed_when: false
  register: spack_binary

- when: not spack_binary.stat.exists
  block:
    # We don't want to run the risk of accidentally performing a git pull, so the git repo and work tree are separate.  We only pull down the last commit.
    # See here: https://cornell-ssw.github.io/cluster_administration.html#understanding-spack
    # At this point, the best way to upgrade Spack (if desired) is to blow it away and perform a fresh install, perhaps using a lock file for the old environment.
    - name: Clone spack
      become: yes
      become_user: root
      command: "/usr/bin/git --work-tree={{ spack_install_dir }} clone --branch={{ spack_ver }} --depth=1 {{ spack_repo }} {{ spack_install_dir }}/src"
      async: '{{spack_timeout_seconds}}'
      poll: 5

    - name: Change ownership of install directory to service account
      file:
        path: '{{ spack_install_dir }}'
        owner: '{{ spack_service_user }}'
        group: '{{ spack_service_user }}'
        state: directory
        recurse: yes
        follow: no

    - name: Ensure that install directory is world readable.
      file:
        path: '{{ spack_install_dir }}'
        state: directory
        mode: 0755

- name: Add sudoers rule to make it so that "spack install" is run as service account on build host
  become: yes
  become_user: root
  when: not spack_binary.stat.exists and spack_build_host
  template:
    src: sudoers-spack.j2
    dest: /etc/sudoers.d/spack

- name: Update setup-env.sh spack wrapper function to force install command to sudo to service account
  become: yes
  become_user: root
  when: not spack_binary.stat.exists and spack_build_host
  template:
    src: setup-env.sh.j2
    dest: '{{ spack_install_dir }}/share/spack/setup-env.sh'

- name: Add Spack to universal bash profile.
  become: yes
  become_user: root
  when: spack_make_sys_default and not spack_binary.stat.exists
  template:
    src: spack-env.sh.j2
    dest: /etc/profile.d/spack-env.sh

- name: Initialize Spack environmment
  become: yes
  become_user: '{{ spack_service_user }}'
  when: not spack_binary.stat.exists
  command: "/bin/bash /etc/profile.d/spack-env.sh"

- name: Ensure that environments directory can be read/written to by anyone and can be backed up by the service user
  become: yes
  become_user: '{{ spack_service_user }}'
  file:
    path: '{{ spack_install_dir }}/var/spack/environments'
    owner: '{{ spack_service_user }}'
    group: '{{ spack_service_user }}'
    state: directory
    mode: 02777

- name: Remove modules config if modules are not enabled.
  file:
    path: '{{ spack_install_dir }}/etc/spack/defaults/modules.yaml'
    state: absent
  when: not spack_modules

# If we don't have gcc 8, various Spack commands for installing / mirroring compilers will crap out, since LLVM requires gcc 8 instead
# of the the CentOS 7 default (4.8.5).  Even for mirroring, Spack seems to concretize for some reason.
- name: If running a version of RHEL/CentOS before 8, add gcc 8 to compilers.
  become: yes
  become_user: '{{ spack_service_user }}'
  command: /bin/scl enable devtoolset-8 "{{ spack_install_dir }}/bin/spack compiler find --scope defaults"
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version < '8'

- name: Add the package mirror as a default mirror globally.
  become: yes
  become_user: '{{ spack_service_user }}'
  command: "{{ spack_install_dir }}/bin/spack mirror add local file://{{ spack_mirror_dir }} --scope defaults"
  when: "{{ spack_mirror_pkgs|default(false, true) }}"

- name: Make a package mirror / local cache of source code for all versions of key packages and their dependencies.
  become: yes
  become_user: '{{ spack_service_user }}'
  with_items: "{{ spack_mirror_pkgs }}"
  when: "{{ spack_mirror_pkgs|default(false, true) }}"
  command: "{{ spack_install_dir }}/bin/spack mirror create -D -d {{ spack_mirror_dir }} -n all {{ item }}"
  async: '{{spack_timeout_seconds}}'
  poll: 120

# This takes a long time because compiling compilers takes a long time.
# Because of this we have it run asynchronously.
# Anecdotal reference:
# https://unix.stackexchange.com/questions/421822/how-long-does-it-take-to-compile-gcc-7-3-0
- name: Install base environment packages.
  become: yes
  become_user: '{{ spack_service_user }}'
  with_items: "{{ spack_base_env }}"
  when: "{{ spack_base_env|default(false, true) }}"
  command: "{{ spack_install_dir }}/bin/spack install {{ item }}"
  async: '{{spack_timeout_seconds}}'
  poll: 120
